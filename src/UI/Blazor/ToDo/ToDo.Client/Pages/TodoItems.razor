@page "/TodoItems"
@rendermode InteractiveWebAssembly
@inject IToDoHttpService httpService;
@using Todo.Core.Models
@using Todo.Core.Services

<PageTitle>Todo Items</PageTitle>

<h1>Todo Items</h1>

<div class="row">
    <div class="col-12">
        <EditForm EditContext="@EditContext" OnSubmit="GenerateTestDataAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="flex-container">
                <InputNumber @bind-Value="Model.ItemLength" class="form-control" style="width: 100px;" />

                <button class="btn btn-primary" disabled="@IsLoading" @onclick="GenerateTestDataAsync">
                    @(IsLoading ? "Loading..." : "Generate test data")
                </button>
            </div>
        </EditForm>


    </div>
    <div class="col-12">
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Category name</th>
                    <th>Create date</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @if (todoItems is null)
                {
                    <tr>
                        <td colspan="4">Loading...</td>
                    </tr>
                }
                else if (!todoItems.Items.Any())
                {
                    <tr>
                        <td >No data found. Please click generate data</td>
                    </tr>
                }
                else
                {
                    @foreach (GetToDoItemsResponse todoItem in todoItems.Items)
                    {
                        <tr>
                            <td>@todoItem.Title</td>
                            <td>@todoItem.Description</td>
                            <td>@todoItem.CategoryName</td>
                            <td>@todoItem.CreatedAt</td>
                            <td></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <nav aria-label="Pagination">
        <button @onclick="PrevPageAsync" disabled="@IsLoading">Prev</button>
        <span> @PageNumber of @totalCount </span>
        <button @onclick="NextPageAsync" disabled="@IsLoading"> Next </button>
    </nav>
</div>

@code {
    private GetToDoItemCollectionResponse? todoItems;
    private bool processing;
    private bool IsLoading => processing || todoItems == null;

    protected int totalCount;
    protected GenerateDataRequest Model { get; set; } = new();
    protected List<string> ValidationErrors { get; set; } = new();
    protected EditContext EditContext = default!;
    protected ValidationMessageStore ValidationMessages = default!;
    protected int PageNumber { get; set; } = 1;
    protected int PageSize { get; set; } = 50;

    protected async Task GenerateTestDataAsync()
    {
        processing = true;
        await httpService.GenerateTestDataAsync(Model);
        await LoadDataAsync();
        processing = false;
    }

    protected override async Task OnInitializedAsync()
    {
        EditContext = new (Model);
        ValidationMessages = new(EditContext);
        EditContext.OnFieldChanged += (sender, eventArgs) => Validate();
        EditContext.OnValidationRequested += (sender, eventArgs) => Validate();
        await LoadDataAsync();
    }

    protected void Validate()
    {
        ValidationErrors.Clear();

        if (Model.ItemLength < 1 || Model.ItemLength > 200)
        {
            ValidationErrors.Add("Count must be in 1 and 200");
        }
    }

    protected async Task NextPageAsync()
    {
        if (PageNumber < totalCount)
        {
            PageNumber++;
        }
        else
        {
            PageNumber = 0;
        }

        await LoadDataAsync();
    }


    protected async Task PrevPageAsync()
    {
        if (PageNumber > 0)
        {
            PageNumber--;
        }
        else
        {
            PageNumber = totalCount - 1;
        }

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        todoItems = await httpService.GetItemsAsync(PageSize, PageNumber);
        totalCount = todoItems.ItemsCount / PageSize;
    }
}
